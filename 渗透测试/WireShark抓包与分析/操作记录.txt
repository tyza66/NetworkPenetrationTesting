嗅探 协议攻击

ARP
ICMP TCP
UDP
DNS
HTTP

打开ws看看有波浪线的网卡 双击查看就可以
点击捕获 选项 还可以重新选

设置最下面的过滤器  host xxx 会将发送给这台机器和这台机器往外发的都会抓

如果我想抓源ip是哪个地址的 物理机向外发出的 就src host xxx
如果我想抓所有发送给我物理机的数据包就dst host xxx

如果想捕获发送到物理机并且走80端口的dst host 192.168.101.96 && port 80
如果想捕获发送信息并且走80端口的src host 192.168.101.96 && port 80

如果直接指定port 80也可以 !port 80 非80也可以

直接icmp也可以 tcp udp mac地址 主机名 ipv4 都可以 ip6
红色就是错的

混杂模式
九四接受所有经过网卡的数据包 包括不是发送给本机的包
既不验证mac地址 普通模式下万科只接受发送给本机的包 传递给上层程序 其它包一律丢弃
混杂模式一般不会影响正常工作 一般在网络监听工具上使用
ws默认开启的就是混杂模式
在捕获中的 选项左下角有开关
点击文件 点击保存 
一般选pcap格式 可以用tcpdump去分析
右键有个对话着色 可以为指定的东西着色
可以新建颜色规则看一下系统设置好的或者自定义

如果想看当前中的某协议 直接在上面的框里面输入比如tcp

过滤tcp和udp的时候基于他们的也会出来  
udp有时候丢包但是不可靠 DNS一般是udp 负载低 响应快
很多dns服务器仅支持udp
http是基于tcp的
ip.addr == 192.168.101.53 就是过滤和某个ip相关的
ip.src_host == 192.168.101.53 源ip
ip.dst_host == 192.168.101.53 目标ip
从53发到96的
ip.src_host == 192.168.101.53 and ip.dst_host == 192.168.101.96
或者也行 两边有一个条件满足就行
ip.src_host == 192.168.101.53 or ip.dst_host == 192.168.101.96
用||和&&也行

接下来对常用协议抓包并分析
我们一般关闭混杂模式操作
ARP 地址解析协议 ARP通过网络地址定位mac地址
任何一台机器里面都有个arp缓存 可以通过arp -a查看
nmap -sn 192.168.101.96
nmap在内网探测的时候也是用的arp

icmp协议直接
本机发出去的是请求包 远程回来的是响应包
ping的type去的都是8 回的都是0

再看看tcp的
这里都是相对序号 ACK啥的那些
可以看看flages seqraw 是绝对的序列
点击统计 流量图
看一下三次握手四次挥手

然后是http协议的

──(root💀tyza66)-[~]
└─# curl -I baidu.com
HTTP/1.1 200 OK
Date: Wed, 19 Feb 2025 03:34:08 GMT
Server: Apache
Last-Modified: Tue, 12 Jan 2010 13:48:00 GMT
ETag: "51-47cf7e6ee8400"
Accept-Ranges: bytes
Content-Length: 81
Cache-Control: max-age=86400
Expires: Thu, 20 Feb 2025 03:34:08 GMT
Connection: Keep-Alive
Content-Type: text/html

请求一下头部信息
http是握手后的数据传输
再对应的条上右键 点击追踪流
TCCP和http都行
看上面红色是客户端分组
蓝色是服务器分组
如果服务器被黑 但是可以ping通网关 但是不能上网
修改主机的TTL值为1  linux默认是64
数据报文的生存周期就剩下1 了
只能经过一跳(每经过一个路由节点)
所以现在只能ping通网关 别的什么也ping不到 直接返回time to live TTL到期了
之后抓包重新ping 抓包后就在网关那里就返回了
抓包发现ping请求响应的地方太近了
发现了问题之后把TTL值改回来 改回64就可以了
echo "64" > /proc/sys/net/ipv4/ip_default_ttl
我们还可以路由跟踪
或者用mtr 可以看经过了哪些节点
mtr 地址就可以查看网络数据包经过的路由节点
或者直接看ping时候的ttl值
用64减去这个显示的值就行了